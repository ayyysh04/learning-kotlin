View Binding is a feature introduced in Android Studio 3.6 that allows you to access view components in your XML layout files directly in your Kotlin or Java code, without the need to use findViewById(). Here are some reasons why you might want to use View Binding in your Android app:

1.It's type-safe: View Binding generates a binding class for each XML layout file, which contains direct references to all the views in that layout. This means that you can access views directly in your code, and the compiler will check that you are using the correct view types.

2.It's more efficient: Using View Binding is more efficient than using findViewById(), because View Binding performs the view lookups only once, when the binding object is created. In contrast, findViewById() performs a lookup every time it is called.

3.It reduces boilerplate code: With View Binding, you no longer need to write findViewById() for each view in your layout, which can save a lot of boilerplate code.

Here's how to use View Binding in Kotlin:

1.Enable View Binding in your app's build.gradle file by adding the following code inside the android block:

android {
    ...
    viewBinding {
        enabled = true
    }
}

NOTE:Rebuild the project after enable viewBinding otherwise viewBinding class will not get generated
2.Create a binding object for your layout file by calling the inflate() method on the binding class. This method returns an instance of the binding class, which contains direct references to all the views in the layout.

private lateinit var binding: ActivityMainBinding

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    binding = ActivityMainBinding.inflate(layoutInflater)
    setContentView(binding.root)
}
3.Access views in your layout by using the properties generated by the binding class. The property name is generated based on the ID of the view in the layout.

binding.button.setOnClickListener {
    // do something
}

binding.textView.text = "Hello, world!"
Note that the property names generated by View Binding are in camel case, with the first letter of each word capitalized. If the ID of the view in the layout contains underscores, they are removed and the next letter is capitalized. For example, a view with ID my_text_view would have a property name of myTextView.

USE `tools:viewBindingIgnore="true"` IN XML FILE -> to avoid generating view binding class for this activity-->
