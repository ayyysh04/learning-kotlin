<?xml version="1.0" encoding="utf-8"?>
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    tools:viewBindingIgnore="true">

    <data>

        <variable
            name="myViewModel"
            type="com.example.myapplication.livedata.livedataWithDataBinding.Example1ViewModel" />
    </data>

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tools:context=".MainActivity">

        <!--In Android data binding, you can use expressions like "@{String.valueOf(myViewModel.count)}" to bind data to UI elements.
        On the other hand, "@{myViewModel.count}" is a shorthand syntax for "@{String.valueOf(myViewModel.count)}", where data binding automatically converts the variable into a string.
        So, yes, you can use "@{myViewModel.count}" instead of "@{String.valueOf(myViewModel.count)}". Both will achieve the same result of displaying the value of myViewModel.count in the UI element. However, keep in mind that this shorthand syntax will only work if myViewModel.count is of a primitive type or has a toString() method implemented. If myViewModel.count is a more complex object, you will need to use String.valueOf() or some other way of converting it to a string.
        -->
        <!--        used live data to xml without observer function like in prev examples-->
        <TextView
            android:id="@+id/count_text"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@{String.valueOf(myViewModel.countData)}"
            android:textSize="66sp"
            android:textStyle="bold"
            android:typeface="serif"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="0.262" />

        <!--using lambda function to pass onClick function : "@{()->myViewModel.updateCount()}" -->
        <Button
            android:id="@+id/button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:onClick="@{()->myViewModel.updateCount()}"
            android:text="Click Here"
            android:textSize="30sp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <Button
            android:id="@+id/go_to_lwd_challenge"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="go to lwd challenge view"
            android:textSize="15sp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.494"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="0.665" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>